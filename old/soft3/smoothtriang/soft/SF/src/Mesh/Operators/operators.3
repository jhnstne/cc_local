.TH operators 3
.SH NAME
Operators \- A set of routines to create mesh objects
.SH SYNTAX
.B #\include "mesh.h"
.SH DESCRIPTION
.I Operators
are routines designed to simplify the creation of mesh objects.  The operators
don't create 
.I internal
or 
.I external
data fields.

.SH ROUTINES
.LP
.nf
.B Vertex *AddVertexEdge( m, e )
.B Mesh *m;
.B Edge *e;
.fi
.PP
Creates and returns vertex which splits edge e.  Works for half edges also.
This operator always succeeds.

.LP
.nf
.B Vertex* CenterSplitFace(m, f)
.B Mesh* m;
.B Face* f;
.fi
.PP

Split the face f by introducing a new vertex at the center of the face
and forming triangules from the edges of the orignal face joined to
the center vertex.  Thus, an n sided face will be split into n
triangles.  The center vertex is returned.

.LP
.nf
.B Face *CreateFace( m )
.B Mesh *m;
.fi
.PP
Creates a new face, 3 half edges, 3 vertices.  Sets internalData,
externalData, name pointers to NULL.
Returns the face created.

.LP
.nf
.B Face *CreateOpposingTriFace( m, e1, e2 )
.B Mesh *m;
.B Edge *e1;
.B Edge *e2;
.fi
.PP
Create a new triangular face opposing the consecutive boundary edge e1
and e2.  If e2 is NULL, the face merely bounds e1 and a newly created
vertex.  The newly created face is returned.
If e1 or e2 aren't boundary edges, or if the head of e1 isn't the tail
of e2, then NULL is returned.

.lP
.nf Vertex* CreateVertex( m )
.B Mesh* m;
.B Face* f;
.fi
.PP
Create a new vertex in mesh m.

.LP
.nf
.B BOOLEAN DestroyFace( m, f )
.B Mesh *m;
.B Face *f;
.fi
.PP
Removes a face from existence.  Any boundary vertex of such a face must
also be along a boundary edge of the face.
Returns TRUE if face remove, FALSE if face not removed.

.LP
.nf
.B BOOLEAN DestroyVertex( m, v )
.B Mesh *m;
.B Vertex *v;
.fi
.PP
Remove the vertex v from the mesh.  v can not be removed if any edges
point to it.

.LP
.nf
.B int FixVertices(m, f)
.B Mesh* m;
.B void (*f)(m, vo, vn);
.fi
.PP

A mesh that is read from a file can contain vertices that have more
than one boundary.  Such a mesh is invalid.  This procedure finds
all such vertices and splits them into multiple vertices, each having
one boundary.  At each new vertex, the user supplied function, f, is
called with the old and new vertices as arguments.  The return value
is the number of vertices created.

.LP
.nf
.B BOOLEAN JoinHalfEdge( m, he1, he2 )
.B Mesh *m;
.B Edge *he1, *he2;
.fi
.PP
Joins two half edges; they must point to two different faces.
Uses the first edge's vertices; discards the second edge's vertices if
they are not the same as the first.

WARNING: as described/implemented, this may destroy the mesh property.

.LP
.nf
.B "BOOLEAN JoinFaces( m, f1, f2, flg )"
.B Mesh *m;
.B Face *f1;
.B Face *f2;
.fi
.PP

Removes face f2 by removing edge e between f1 and f2.  f1 and f2 must
be neighbors.  Will not create an f1 such that there is a duplicate
vertex in a path of f1's edge.  If flg is non-zero, the vertices that
bounded e will be removed if they only have 2 neighbors.

NOTE: In the current implementation, flg must be zero.

.LP 
.nf 
.B "BOOLEAN JoinVertices( m, v1, v2, flg )"
.B Mesh *m; 
.B Vertex *v1; 
.B Vertex *v2; 
.fi 
.PP 

Remove vertex v2 by removing the edge between v1 and v2.  The faces
neighboring the edge will have one less edge.  This may result in
faces having only two edges.  Such faces will be removed if flg is
non-zero.  An edge can not be collapsed if both v1 and v2 are boundary
vertices.

Certain vertices can not be joined.  In particular, two vertices on a
3 cycle can not be joined.

TRUE is returned if the join was performed, FALSE if the join was not
performed.

.LP
.nf
.B Edge *RemoveVertexEdge( m, v )
.B Mesh *m;
.B Vertex *v;
.fi
.PP

Removes vertex v from the mesh.  v must have degree 2; faces around
v must have > 3 vertices.  Joins the edges incident on v into one edge.
Returns the resulting edge, NULL if could not remove v.

.LP
.nf
.B Edge *SplitEdge( m, e1 )
.B Mesh *m;
.B Edge *e1;
.fi
.PP

Splits edge into two distinct half edges; if a vertex of the edge is 
already on a boundary, then the vertex is split into two vertices,
one for each half edge.
Returns a pointer to the previous sym edge of the input edge, NULL
if the edge is not a full edge.

.LP
.nf
.B "Face *SplitFace( m, f1, v1, v2 )"
.B Mesh *m;
.B Face *f1;
.B Vertex *v1, *v2;
.fi
.PP
Splits f1 by creating edge between vertices v1 & v2, creates new face.
v1 & v2 must lie on the boundary of f1 and can not already be
connected.
Returns new face, NULL  if not created.

.SH AUTHORS
Richard Schulte,
Stephen Mann

.SH DATE
October 18, 1991
