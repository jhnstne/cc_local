
The purpose of this paper is to show a new method for developing flythroughs of arbitrary scenes.  A flythrough is the path, both position and orientation, of a camera as it moves through some scene.  A flythrough is often employed in architectural work when previewing a model of a building or any other situation when a 3d model needs to be inspected.  The key problems that must be solved to develop a flythrough are building a good path through the scene and then making sure that the path does not intersect with the scene.

We build the path using key frames.  At each key frame the position and orientation are extracted so that we can build a cubic Bezier spline through the positions and a quaternion spline through the orientations.  This is the path for the camera to follow.  However, following the point that the camera is at does not help us detect intersections.  Instead, it is the back clipping plane of the view frustum that should be intersected with the scene.  Using the position and orientation curves we build Bezier curves for the path of each corner of the rear clipping plane.  We then build a surface between these curves.  This surface can be intersected with the scene to find intersections.

The surface is intersected in order by parameter value.  We intersect in this order so that we can find the very first intersection in order to correct it.  In general, we want to find a parameter interval over which an intersection occurs.  We also find which corners of the back clipping plane are poking through a wall.  Finally we approximate how deep the intersection is.  To correct that intersection, we introduce a new key frame at the center of that interval with the position and orientation of the curve at that point.  The position is modified by adding a vector that is the average of vectors from the center of the back clipping plane to the corners that are not poking through the walls scaled by the depth of the intersection.  This procedure does not guarantee that the intersection is wholly fixed, but it is quick and can be repeated and will correct the intersection in a few iterations.

To accelerate the triangle-triangle intersections that are required in the collision detection, we employ an octree.  The octree partitions space into octants.  If too many triangles exist in a given octant, that octant is recursively subdivided into octants.  This spatial decomposition of the scene allows us to greatly reduce the number of intersections that we have to perform.

Although we have not yet tested this algorithm on a large number of scenes and paths, it has been successful and fairly fast on the ones that we have tried.  Typically, the correction algorithm needed 1-3 iterations before the path is fixed.  This number could vary wildly depending on the geometry of the scene and of the path.  However, because of the nature of the algorithm, the smaller, easier intersections will take less to correct.

This algorithm, although there is room for refinement, is a fast and effective way of building a flythrough of a scene.
