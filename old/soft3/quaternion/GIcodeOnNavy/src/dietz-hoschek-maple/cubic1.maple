# Test programs for finding cubic pyth. hodograph
# bezier curves

# P0,P1,P2,P3 will be linear bezier curves

P0 := vector([p00,p01]);
P1 := vector([p10,p11]);
P2 := vector([p20,p21]);
P3 := vector([p30,p31]);

# XT, YT, ZT will be cubic bezier curves

XT := vector([x0,x1,x2,x3]);
YT := vector([y0,y1,y2,y3]);
ZT := vector([z0,z1,z2,z3]);


# compute the first derivatives of the primary curves

#XTprime := bezdiff(XT,3);
#YTprime := bezdiff(YT,3);
#ZTprime := bezdiff(ZT,3);

XTprime := vector([X0,XM,X1]);
YTprime := vector([Y0,YM,Y1]);
ZTprime := vector([Z0,ZM,Z1]);

# impose the restrictions

x1 := add(scalarmul(bezproduct(P0,1,P1,1),2),
	  scalarmul(bezproduct(P2,1,P3,1),-2));


x2 := add(scalarmul(bezproduct(P1,1,P3,1),2),
	  scalarmul(bezproduct(P0,1,P2,1),2));


x3 := add(
	add(bezproduct(P1,1,P1,1),bezproduct(P2,1,P2,1)),
	scalarmul(	
		add(bezproduct(P0,1,P0,1),bezproduct(P3,1,P3,1)),-1));

eqX := vector(3);
eqY := vector(3);
eqZ := vector(3);
eqall := vector(9);

for i from 1 to 3 do
	eqX[i] := (x1[i] - XTprime[i]);
	eqY[i] := (x2[i] - YTprime[i]);
	eqZ[i] := (x3[i] - ZTprime[i]);
	eqall[i] := eqX[i];
	eqall[i+3] := eqY[i];
	eqall[i+6] := eqZ[i];
od;

cubsys := {eqall[1],eqall[2],eqall[3],eqall[4],eqall[5],
		eqall[6],eqall[7],eqall[8],eqall[9]};


topsys := {eqall[1],eqall[4],eqall[7]};
midsys := {eqall[2]+eqall[3],eqall[5]+eqall[6],
	eqall[8]+eqall[9]};
abmidsys := 	{	
		midsys[1] - (3*x1-3*x3-K1),
		midsys[2] - (3*y1-3*y3-K2),
		midsys[3] - (3*z1-3*z3-K3)
		};
srules := {x0=0,y0=0,z0=0,x3=0,y3=0,z3=1,x1=0};
cube_tex := proc()
writeto(`texout`);
print(`\\documentstyle[12pt]{article}`);
print(`\\textheight 8.5in`);
print(`\\textwidth 6.0in`);
print(`\\hoffset -0.5in`);
print(`\\voffset -0.2in`);
print(`\\begin{document}`);
print(`\\[`);
for i from 1 to 3 do
	latex(eqX[i]);
	print();
	print(`\\\\`);
od;


for i from 1 to 3 do
	latex(eqY[i]);
	print();
	print(`\\\\`);
od;


for i from 1 to 3 do
	latex(eqZ[i]);
	print();
	print(`\\\\`);
od;
print(`\\]`);
print(`\\end{document}`);
writeto(terminal);

end;

